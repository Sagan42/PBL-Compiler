registro Carro {
	Pneu p1
	Pneu p2;
	Pneu ;
	Pneu p4;
	inteiro ;
	Janelas a[Janelas.qtd];
	Bancos  frente[Bancos.frente.qtd];
}

registro {
	inteiro a,b,c;
	char roupas[5];
	cadeia teste;
}

registro Pessoa2
	char a, b;
	char teste[a][b];
	char teste[3][3];
} 

registro
	inteiro a,b,c;
	char roupas[5];
	cadeia teste;
}

registro Teste_de_Matriz_vetores {
	inteiro a[2];
	char    b[], d[2];
	inteiro c[1
	real    e[][a];
	inteiro e[a
}

constantes {
	inteiro  a = 0
	char     b  'a';
	booleano  = verdadeiro;
	real     teste = 2.1 teste1 = 3.565, teste2 = 55677.3434;
	d = "cadeiaz\"\a";
	booleano teste = 


variaveis {
    Pessoa  teste[0];
    Pessoa2  teste[2];
    inteiro teste   = 2
    real    teste_2 = 2.23 c = 23.40;
    cadeia  ;
    booleano d      = ;
    inteiro a[2], teste[3], teste_a = 2, teste_b  200;
    inteiro b[2] = [0,1,2] m[1][1] = [1,2 3,4];
    inteiro b[2] = [0,1 2];
    inteiro b[4] = [0,1,2 ;
    inteiro b[2] = [0,1,];
    real    c[][2];
    real    d[2][2] = [0.1, 0.2, 0.3; , 1.2, 1.3; 2.1, 2.2, 2.3];
}

% ============ Primeira funcao de teste =============================================
funcao inteiro teste(inteiro a, real b[], Pessoa p[], Carro car[][], booleano teste){
	constantes {
		inteiro a = 2;
		real b = 4;
		real c = 2.3;
	}
	escreva(teste);
	escreva(a[carro.tamanho]);
	escreva(a[a][2]);
	escreva(a[2]);
	escreva(elemento.composto);
	escreva(elemento.composto, a, teste[1], matriz[0][0], "cadeia_de_caracteres");

	leia(teste);
	leia(a[carro.tamanho]);
	leia(a[a][2]);
	leia(a[2]);
	leia(elemento.composto);
	leia(elemento.composto, a, teste[1], matriz[0][0]);
	retorno 0;
}
% ===================================================================================

% ============ Segunda funcao de teste =============================================
funcao inteiro teste(inteiro a, real b[], Pessoa p[], Carro car[][], booleano teste){
	constantes {
		inteiro a = 2;
		real b = 4;
		real c = 2.3;
	}

	variaveis {
		inteiro local_a = 0;
		inteiro local_b = 1;
		cadeia  local_c = 2;
		real       c[5] = [0,1,2,3,4];
	}
	
	enquan( local_a >= local_b ) {
		local_a = local_a + 1;
		local_b = local_b + 2;
		local_c = ( (local_a + 2)*(local_b + 3) ) / 4.5;
	}

	par( i = 0; i < 10; i ++){
		escreva("Funciona", local_a, local_b, local_c);
	}
	
	para( i = 0; i < 10; i ++){
		escreva("Funciona", local_a, local_b, local_c);
	}

	enquanto( local_a >= local_b ) {
		local_a = local_a + 1;
		local_b = local_b + 2;
		local_c = ( (local_a + 2)*(local_b + 3) ) / 4.5;
	}
	
	retorno 0;
}

% ============ Teste de declaracao de funcao ========================================
funcao inteiro (inteiro a, real b, char tr[]){ % ok

	retorno 0;
}

funcao teste (inteiro a, real b, char tr[]){ % ok

	retorno 0;
}

funcao inteiro t1(inteiro a, real b char tr[]){ % ok

	retorno 0;
}

funcao inteiro t2(inteiro a, real b, char tr]){ % ok

	retorno 0;
}

funcao inteiro t3(inteiro a real b, char tr[]){ % ok

	retorno 0;
}

funcao inteiro t4(inteiro a, real b, char tr[]{

	retorno 0;
}

funcao inteiro t5 inteiro a, real b, char tr[]){

	retorno 0;
}

funcao inteiro t6(inteiro a, real b, tr[]){

	retorno 0;
}

funcao inteiro t7(inteiro a, real b, char tr[])

	retorno 0;
}

funcao inteiro t8(inteiro a, real b, char tr[]){

	retorno 0;

% ===================================================================================
% ===================================================================================
% == Funcao Principal ===============================================================
funcao inteiro algoritmo(){
	variaveis {
		inteiro local_a = 0;
		inteiro local_b = 1;
		cadeia  local_c = 2;
		real       c[5] = [0,1,2,3,4];
	}
	
	teste(a, b, p, car, teste);
	teste();
	
	% === teste de erro para chamada de funcao
	teste(a, b, p, car tr);
	teste_2(, b, p, car, tr);    
	teste_3 a, b, p, car, tr);
	teste_4(a, b, p, car, tr;
	teste(a, b, p, car, tr)
	teste()
	% =======================================
	
	% === teste de erro para atribuicao
	a = 2
	a 3;
	a[0] = "cadeia_de_caracteres"
	a.idade = ;
	a.tamanho = teste()
	a[0][0] = b
	a[0][0] = b, b = teste();           % isso aqui e valido de acordo a gramatica
	a       = b, b = (teste + 2) / 4.5; % isso aqui e valido de acordo a gramatica
	% =======================================

	enquanto( local_a >= local_b ) {
		local_a = local_a + 1;
		local_b = local_b + 2;
		local_c = ( (local_a + 2)*(local_b + 3) ) / 4.5;
	}
	
	para( i = 0; i < 10; i ++){
		escreva("Funciona", local_a, local_b, local_c);
	}
	
	se( ( (local_a > 2) && (local_b < 10) && ! a) || (local_c != 50)){
		leia(c[0]);
	}senao{
		leia(c[0]);
		escreva(c[4]);
	}
	retorno (local_a + local_c + c[a]) / 2;
}







